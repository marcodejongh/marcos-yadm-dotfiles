#!/usr/bin/env python3
"""
zellij-peacock-sync: Sync zellij with VSCode Peacock extension colors and directory context
Provides dynamic tab naming and theme suggestions based on peacock colors and git worktrees.
"""

import json
import os
import subprocess
import sys
from pathlib import Path


def get_worktree_name(directory=None):
    """Get git worktree name from directory path"""
    if directory is None:
        directory = os.getcwd()
    
    # Check if we're in a git worktree by looking for common patterns
    path = Path(directory)
    
    # Look for afm pattern specifically
    for part in path.parts:
        if 'afm' in part:
            # Find the index of 'afm' in the path
            afm_index = path.parts.index(part)
            if afm_index + 1 < len(path.parts):
                # The next part after 'afm' should be the worktree name
                worktree_name = path.parts[afm_index + 1]
                # Skip 'master' as it's not descriptive
                if worktree_name != 'master':
                    return worktree_name
    
    return None


def get_peacock_color(directory=None):
    """Get peacock color from VSCode settings in the given directory"""
    if directory is None:
        directory = os.getcwd()
    
    vscode_settings = Path(directory) / ".vscode" / "settings.json"
    
    if not vscode_settings.exists():
        return None
    
    try:
        with open(vscode_settings, 'r') as f:
            settings = json.load(f)
        
        return settings.get('peacock.color')
    except (json.JSONDecodeError, IOError):
        return None


def normalize_path(directory):
    """Normalize path by replacing /Users/mdejongh with ~"""
    if directory is None:
        directory = os.getcwd()
    
    home_path = "/Users/mdejongh"
    if directory.startswith(home_path):
        return directory.replace(home_path, "~", 1)
    return directory


def set_zellij_tab_name(worktree_name=None, directory=None):
    """Set zellij tab name based on worktree or directory"""
    if not os.environ.get('ZELLIJ'):
        return  # Not in a zellij session
    
    try:
        if worktree_name:
            # Use worktree name for tab
            subprocess.run(['zellij', 'action', 'rename-tab', worktree_name], 
                          capture_output=True, check=False)
        else:
            # Use directory basename for tab
            normalized_path = normalize_path(directory)
            if normalized_path == "~":
                tab_name = "~"
            else:
                tab_name = Path(normalized_path).name or normalized_path
            
            subprocess.run(['zellij', 'action', 'rename-tab', tab_name], 
                          capture_output=True, check=False)
    except Exception:
        # Silently fail if zellij commands don't work
        pass


def detect_peacock_theme(peacock_color):
    """Detect peacock color and suggest appropriate custom zellij theme"""
    if not peacock_color:
        return "gruvbox-dark"  # default
    
    # Map peacock colors to our custom themes
    color_lower = peacock_color.lower()
    
    # Blue colors
    if ('blue' in color_lower or 
        peacock_color.startswith('#00') or peacock_color.startswith('#0066') or
        peacock_color.startswith('#1e90ff') or peacock_color.startswith('#4169e1')):
        return "peacock-blue"
    
    # Green colors  
    elif ('green' in color_lower or
          peacock_color.startswith('#0f') or peacock_color.startswith('#22') or
          peacock_color.startswith('#228b22') or peacock_color.startswith('#32cd32')):
        return "peacock-green"
    
    # Purple colors
    elif ('purple' in color_lower or 'violet' in color_lower or
          peacock_color.startswith('#6f') or peacock_color.startswith('#7c') or
          peacock_color.startswith('#9370db') or peacock_color.startswith('#8a2be2')):
        return "peacock-purple"
    
    # Default fallback
    else:
        return "gruvbox-dark"


def main():
    """Main function"""
    # Check if we're in a zellij session
    if not os.environ.get('ZELLIJ'):
        sys.exit(0)  # Silent exit if not in zellij
    
    # Create a simple lock to prevent multiple instances
    lock_file = Path("/tmp/zellij-peacock-sync.lock")
    try:
        if lock_file.exists():
            # Check if the lock is stale (older than 5 seconds)
            if (Path.stat(lock_file).st_mtime + 5) < os.path.getmtime("/tmp"):
                lock_file.unlink()
            else:
                sys.exit(0)  # Another instance is running
        
        lock_file.touch()
        
        directory = sys.argv[1] if len(sys.argv) > 1 else None
        peacock_color = get_peacock_color(directory)
        worktree_name = get_worktree_name(directory)
        
        # Set tab name based on context
        set_zellij_tab_name(worktree_name, directory)
        
        # Log peacock theme detection for debugging
        if peacock_color:
            suggested_theme = detect_peacock_theme(peacock_color)
            # Create a state file to communicate theme to shell hooks
            state_file = Path("/tmp/zellij-peacock-theme.state")
            try:
                with open(state_file, 'w') as f:
                    f.write(f"{suggested_theme}\n{peacock_color}\n{worktree_name or 'none'}\n")
            except Exception:
                pass  # Silently fail if can't write state
            
    finally:
        # Clean up lock file
        if lock_file.exists():
            lock_file.unlink()


def get_suggested_theme():
    """Get the suggested theme from state file (for shell integration)"""
    state_file = Path("/tmp/zellij-peacock-theme.state")
    if state_file.exists():
        try:
            with open(state_file, 'r') as f:
                lines = f.read().strip().split('\n')
                return lines[0] if lines else "gruvbox-dark"
        except Exception:
            pass
    return "gruvbox-dark"


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--get-theme":
        print(get_suggested_theme())
    else:
        main()