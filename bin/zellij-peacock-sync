#!/usr/bin/env python3
"""
zellij-peacock-sync: Sync zellij colors with VSCode Peacock extension colors
Note: Zellij has limited runtime color customization compared to tmux.
This script primarily handles theme detection and can be extended for future zellij features.
"""

import json
import os
import subprocess
import sys
from pathlib import Path


def get_worktree_name(directory=None):
    """Get git worktree name from directory path"""
    if directory is None:
        directory = os.getcwd()
    
    # Check if we're in a git worktree by looking for common patterns
    path = Path(directory)
    
    # Look for afm pattern specifically
    for part in path.parts:
        if 'afm' in part:
            # Find the index of 'afm' in the path
            afm_index = path.parts.index(part)
            if afm_index + 1 < len(path.parts):
                # The next part after 'afm' should be the worktree name
                worktree_name = path.parts[afm_index + 1]
                # Skip 'master' as it's not descriptive
                if worktree_name != 'master':
                    return worktree_name
    
    return None


def get_peacock_color(directory=None):
    """Get peacock color from VSCode settings in the given directory"""
    if directory is None:
        directory = os.getcwd()
    
    vscode_settings = Path(directory) / ".vscode" / "settings.json"
    
    if not vscode_settings.exists():
        return None
    
    try:
        with open(vscode_settings, 'r') as f:
            settings = json.load(f)
        
        return settings.get('peacock.color')
    except (json.JSONDecodeError, IOError):
        return None


def normalize_path(directory):
    """Normalize path by replacing /Users/mdejongh with ~"""
    if directory is None:
        directory = os.getcwd()
    
    home_path = "/Users/mdejongh"
    if directory.startswith(home_path):
        return directory.replace(home_path, "~", 1)
    return directory


def set_zellij_tab_name(worktree_name=None, directory=None):
    """Set zellij tab name based on worktree or directory"""
    if not os.environ.get('ZELLIJ'):
        return  # Not in a zellij session
    
    try:
        if worktree_name:
            # Use worktree name for tab
            subprocess.run(['zellij', 'action', 'rename-tab', worktree_name], 
                          capture_output=True, check=False)
        else:
            # Use directory basename for tab
            normalized_path = normalize_path(directory)
            if normalized_path == "~":
                tab_name = "~"
            else:
                tab_name = Path(normalized_path).name or normalized_path
            
            subprocess.run(['zellij', 'action', 'rename-tab', tab_name], 
                          capture_output=True, check=False)
    except Exception:
        # Silently fail if zellij commands don't work
        pass


def detect_and_suggest_theme(peacock_color):
    """Detect peacock color and suggest appropriate zellij theme"""
    if not peacock_color:
        return "gruvbox-dark"  # default
    
    # Simple color-to-theme mapping
    color_lower = peacock_color.lower()
    
    if 'blue' in color_lower or peacock_color.startswith('#00') or peacock_color.startswith('#0066'):
        return "tokyo-night"
    elif 'green' in color_lower or peacock_color.startswith('#0f') or peacock_color.startswith('#22'):
        return "gruvbox-dark"
    elif 'purple' in color_lower or peacock_color.startswith('#6f') or peacock_color.startswith('#7c'):
        return "catppuccin-mocha"
    elif 'red' in color_lower or peacock_color.startswith('#f') or peacock_color.startswith('#d'):
        return "kanagawa"
    else:
        return "gruvbox-dark"


def main():
    """Main function"""
    # Check if we're in a zellij session
    if not os.environ.get('ZELLIJ'):
        sys.exit(0)  # Silent exit if not in zellij
    
    # Create a simple lock to prevent multiple instances
    lock_file = Path("/tmp/zellij-peacock-sync.lock")
    try:
        if lock_file.exists():
            # Check if the lock is stale (older than 5 seconds)
            if (Path.stat(lock_file).st_mtime + 5) < os.path.getmtime("/tmp"):
                lock_file.unlink()
            else:
                sys.exit(0)  # Another instance is running
        
        lock_file.touch()
        
        directory = sys.argv[1] if len(sys.argv) > 1 else None
        peacock_color = get_peacock_color(directory)
        worktree_name = get_worktree_name(directory)
        
        # Set tab name based on context
        set_zellij_tab_name(worktree_name, directory)
        
        # For future enhancement: theme switching based on peacock color
        # suggested_theme = detect_and_suggest_theme(peacock_color)
        # Note: Zellij doesn't support runtime theme switching yet,
        # but this could be useful for generating per-project configs
            
    finally:
        # Clean up lock file
        if lock_file.exists():
            lock_file.unlink()


if __name__ == "__main__":
    main()