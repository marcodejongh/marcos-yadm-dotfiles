#!/Users/mdejongh/.tmux_venv/bin/python3
"""
tmux-pane-title: Generate title for a specific pane based on its directory
"""

import json
import os
import subprocess
import sys
from pathlib import Path


def get_git_toplevel(directory):
    """Get git repository toplevel using git rev-parse"""
    try:
        result = subprocess.run(
            ['git', 'rev-parse', '--show-toplevel'],
            cwd=directory,
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            return result.stdout.strip()
    except (subprocess.SubprocessError, FileNotFoundError):
        pass
    return None


def get_worktree_info(directory):
    """Get worktree/repo name and relative path within it"""
    git_root = get_git_toplevel(directory)
    if not git_root:
        return None, None
    
    git_root_path = Path(git_root)
    current_path = Path(directory)
    
    # Check if this is a worktree using git command
    try:
        # Check if .git is a file (indicates worktree) vs directory (main repo)
        git_path = git_root_path / '.git'
        if git_path.exists() and git_path.is_file():
            # This is a worktree - use the directory name
            repo_name = git_root_path.name
        else:
            # This is a regular repo - get the actual repo name
            # Try to get remote origin to find real repo name
            result = subprocess.run(
                ['git', 'remote', 'get-url', 'origin'],
                cwd=directory,
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                # Extract repo name from URL (e.g., git@github.com:user/repo.git -> repo)
                url = result.stdout.strip()
                repo_name = url.rstrip('/').rstrip('.git').split('/')[-1]
            else:
                # No remote, use directory name
                repo_name = git_root_path.name
    except (subprocess.SubprocessError, FileNotFoundError):
        # Fallback to directory name
        repo_name = git_root_path.name
    
    # Get relative path within the repo/worktree
    try:
        rel_path = current_path.relative_to(git_root_path)
        if str(rel_path) == '.':
            return repo_name, None
        else:
            # Truncate long paths
            rel_str = str(rel_path)
            if len(rel_str) > 20:
                rel_str = '...' + rel_str[-17:]
            return repo_name, rel_str
    except ValueError:
        return repo_name, None


def normalize_path(directory):
    """Normalize path by replacing /Users/mdejongh with ~"""
    home_path = "/Users/mdejongh"
    if directory.startswith(home_path):
        return directory.replace(home_path, "~", 1)
    return directory


def main():
    """Generate title for the given directory"""
    directory = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
    
    worktree_name, subdir = get_worktree_info(directory)
    
    if worktree_name:
        if subdir:
            print(f"{worktree_name}/{subdir}")
        else:
            print(worktree_name)
    else:
        # Show the normalized path, but if it's just ~, show ~ not the basename
        normalized_path = normalize_path(directory)
        if normalized_path == "~":
            print("~")
        else:
            print(Path(normalized_path).name or normalized_path)


if __name__ == "__main__":
    main()