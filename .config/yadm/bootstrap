#!/bin/sh

# Store the original directory for accessing config files
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME"
set -e 

echo "Install starting..."

# Platform detection
system_type=$(uname -s)
os_name=""
package_manager=""

case "$system_type" in
    Darwin)
        os_name="macos"
        package_manager="brew"
        ;;
    Linux)
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            case "$ID" in
                fedora|rhel|centos)
                    os_name="fedora"
                    package_manager="dnf"
                    ;;
                ubuntu|debian)
                    os_name="ubuntu"
                    package_manager="apt"
                    ;;
                *)
                    echo "Unsupported Linux distribution: $ID"
                    exit 1
                    ;;
            esac
        else
            echo "Cannot determine Linux distribution"
            exit 1
        fi
        ;;
    *)
        echo "Unsupported operating system: $system_type"
        exit 1
        ;;
esac

echo "Detected platform: $os_name"

# Platform-specific initial setup
if [ "$os_name" = "macos" ]; then
    # requires xcode and tools!
    xcode-select -p || {
        echo "XCode must be installed! (run xcode-select --install)"
        exit 1
    }
    
    echo "Updating to latest apple software"
    sudo softwareupdate -i -a
    
    # Set faster key repeat rates (similar to Linux defaults)
    echo "Configuring faster key repeat rates"
    defaults write -g KeyRepeat -int 2
    defaults write -g InitialKeyRepeat -int 15
elif [ "$os_name" = "fedora" ]; then
    echo "Updating system packages (you may be prompted for password)"
    sudo dnf update -y || echo "Warning: System update failed, continuing..."
elif [ "$os_name" = "ubuntu" ]; then
    echo "Updating system packages (you may be prompted for password)"
    sudo apt update && sudo apt upgrade -y || echo "Warning: System update failed, continuing..."
fi

# Package management
if [ "$os_name" = "macos" ]; then
    # homebrew
    if command -v brew >/dev/null 2>&1; then
        echo "Homebrew already installed. Getting updates..."
        brew update
        brew doctor || true
    else
        echo 'brew must be installed! (/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")'
        exit 1
    fi

    if brew bundle check --global; then
        echo "Brew packages up to date."
    else
        echo "Syncing brew packages with brew bundle"
        brew bundle install --global
    fi
elif [ "$os_name" = "fedora" ]; then
    echo "Installing packages from fedora.txt (you may be prompted for password)"
    fedora_packages="$HOME/.config/yadm/packages/fedora.txt"
    # Also check repo directory for initial setup
    if [ ! -f "$fedora_packages" ] && [ -f "$REPO_ROOT/.config/yadm/packages/fedora.txt" ]; then
        fedora_packages="$REPO_ROOT/.config/yadm/packages/fedora.txt"
    fi
    
    if [ -f "$fedora_packages" ]; then
        # Remove comments and empty lines, then install
        packages=$(grep -v '^#' "$fedora_packages" | grep -v '^$' | tr '\n' ' ')
        echo "Installing packages: $packages"
        sudo dnf install -y $packages || echo "Warning: Some packages failed to install"
        
        # Install VS Code
        if ! command -v code >/dev/null 2>&1; then
            echo "Installing VS Code"
            sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc || echo "Warning: Failed to import VS Code key"
            sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo' || echo "Warning: Failed to add VS Code repository"
            sudo dnf install -y code || echo "Warning: Failed to install VS Code"
        else
            echo "VS Code already installed"
        fi
        
        # Install Brave browser
        if ! command -v brave-browser >/dev/null 2>&1 && ! rpm -qa | grep -q brave; then
            echo "Installing Brave browser"
            curl -fsS https://dl.brave.com/install.sh | sh || echo "Warning: Failed to install Brave browser"
        else
            echo "Brave browser already installed"
        fi
        
        # Install Rust via rustup
        if ! command -v rustc >/dev/null 2>&1; then
            echo "Installing Rust via rustup"
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || echo "Warning: Failed to install Rust"
            # Add cargo to PATH for immediate use
            export PATH="$HOME/.cargo/bin:$PATH"
        else
            echo "Rust already installed"
        fi
        
        # Change default shell to zsh
        if command -v zsh >/dev/null 2>&1; then
            current_shell=$(getent passwd "$USER" | cut -d: -f7)
            zsh_path=$(which zsh)
            if [ "$current_shell" != "$zsh_path" ]; then
                echo "Changing default shell to zsh"
                chsh -s "$zsh_path" || echo "Warning: Failed to change shell to zsh"
            else
                echo "Default shell is already zsh"
            fi
        else
            echo "Warning: zsh not found, cannot change default shell"
        fi
        
        # Install Sunshine if X server is available
        if [ -n "$DISPLAY" ] || command -v X >/dev/null 2>&1 || [ -d "/tmp/.X11-unix" ]; then
            echo "X server detected, installing Sunshine"
            # Add Sunshine repository and install
            if ! command -v sunshine >/dev/null 2>&1 && ! rpm -qa | grep -q -i sunshine; then
                echo "Installing Sunshine via COPR repository"
                # Enable COPR repository for Sunshine (using stable)
                sudo dnf copr enable -y lizardbyte/stable || echo "Warning: Failed to enable COPR repository"
                sudo dnf install -y Sunshine || echo "Warning: Failed to install Sunshine from COPR"
            fi
            
            # Set up autostart (separate check in case Sunshine was already installed)
            if [ ! -f "$HOME/.config/autostart/sunshine.desktop" ]; then
                echo "Setting up Sunshine autostart"
                mkdir -p "$HOME/.config/autostart"
                cat > "$HOME/.config/autostart/sunshine.desktop" << 'EOF'
[Desktop Entry]
Type=Application
Name=Sunshine
Comment=Self-hosted game stream host for Moonlight
Exec=sunshine
Icon=sunshine
StartupNotify=false
X-GNOME-Autostart-enabled=true
Hidden=false
EOF
            else
                echo "Sunshine autostart already configured"
            fi
            
            # Add Mutter cursor fix for better streaming experience
            echo "Configuring Mutter for optimal streaming"
            if ! grep -q "MUTTER_DEBUG_DISABLE_HW_CURSORS=1" /etc/environment 2>/dev/null; then
                echo "MUTTER_DEBUG_DISABLE_HW_CURSORS=1" | sudo tee -a /etc/environment >/dev/null || echo "Warning: Failed to add Mutter cursor fix"
                echo "Added MUTTER_DEBUG_DISABLE_HW_CURSORS=1 to /etc/environment"
            else
                echo "Mutter cursor fix already configured"
            fi
            
            if command -v sunshine >/dev/null 2>&1; then
                echo "Sunshine setup completed"
            fi
        else
            echo "No X server detected, skipping Sunshine installation"
        fi
    else
        echo "Warning: fedora.txt not found, skipping package installation"
    fi
elif [ "$os_name" = "ubuntu" ]; then
    echo "Installing packages from ubuntu.txt (you may be prompted for password)"
    ubuntu_packages="$HOME/.config/yadm/packages/ubuntu.txt"
    # Also check repo directory for initial setup
    if [ ! -f "$ubuntu_packages" ] && [ -f "$REPO_ROOT/.config/yadm/packages/ubuntu.txt" ]; then
        ubuntu_packages="$REPO_ROOT/.config/yadm/packages/ubuntu.txt"
    fi
    
    if [ -f "$ubuntu_packages" ]; then
        # Remove comments and empty lines, then install
        packages=$(grep -v '^#' "$ubuntu_packages" | grep -v '^$' | tr '\n' ' ')
        echo "Installing packages: $packages"
        sudo apt install -y $packages || echo "Warning: Some packages failed to install"
        
        # Install Brave browser
        if ! command -v brave-browser >/dev/null 2>&1 && ! dpkg -l | grep -q brave; then
            echo "Installing Brave browser"
            curl -fsS https://dl.brave.com/install.sh | sh || echo "Warning: Failed to install Brave browser"
        else
            echo "Brave browser already installed"
        fi
        
        # Install Rust via rustup
        if ! command -v rustc >/dev/null 2>&1; then
            echo "Installing Rust via rustup"
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || echo "Warning: Failed to install Rust"
            # Add cargo to PATH for immediate use
            export PATH="$HOME/.cargo/bin:$PATH"
        else
            echo "Rust already installed"
        fi
        
        # Change default shell to zsh
        if command -v zsh >/dev/null 2>&1; then
            current_shell=$(getent passwd "$USER" | cut -d: -f7)
            zsh_path=$(which zsh)
            if [ "$current_shell" != "$zsh_path" ]; then
                echo "Changing default shell to zsh"
                chsh -s "$zsh_path" || echo "Warning: Failed to change shell to zsh"
            else
                echo "Default shell is already zsh"
            fi
        else
            echo "Warning: zsh not found, cannot change default shell"
        fi
        
        # Install Sunshine if X server is available
        if [ -n "$DISPLAY" ] || command -v X >/dev/null 2>&1 || [ -d "/tmp/.X11-unix" ]; then
            echo "X server detected, installing Sunshine"
            # Install Sunshine for Ubuntu
            if ! command -v sunshine >/dev/null 2>&1 && ! dpkg -l | grep -q sunshine; then
                echo "Installing Sunshine for Ubuntu"
                sudo curl -fsSL https://github.com/LizardByte/Sunshine/releases/latest/download/sunshine-ubuntu-22.04-amd64.deb -o /tmp/sunshine.deb || echo "Warning: Failed to download Sunshine"
                sudo dpkg -i /tmp/sunshine.deb || sudo apt-get install -f -y
                rm -f /tmp/sunshine.deb
            fi
            
            # Set up autostart (separate check in case Sunshine was already installed)
            if [ ! -f "$HOME/.config/autostart/sunshine.desktop" ]; then
                echo "Setting up Sunshine autostart"
                mkdir -p "$HOME/.config/autostart"
                cat > "$HOME/.config/autostart/sunshine.desktop" << 'EOF'
[Desktop Entry]
Type=Application
Name=Sunshine
Comment=Self-hosted game stream host for Moonlight
Exec=sunshine
Icon=sunshine
StartupNotify=false
X-GNOME-Autostart-enabled=true
Hidden=false
EOF
            else
                echo "Sunshine autostart already configured"
            fi
            
            # Add Mutter cursor fix for better streaming experience
            echo "Configuring Mutter for optimal streaming"
            if ! grep -q "MUTTER_DEBUG_DISABLE_HW_CURSORS=1" /etc/environment 2>/dev/null; then
                echo "MUTTER_DEBUG_DISABLE_HW_CURSORS=1" | sudo tee -a /etc/environment >/dev/null || echo "Warning: Failed to add Mutter cursor fix"
                echo "Added MUTTER_DEBUG_DISABLE_HW_CURSORS=1 to /etc/environment"
            else
                echo "Mutter cursor fix already configured"
            fi
            
            if command -v sunshine >/dev/null 2>&1; then
                echo "Sunshine setup completed"
            fi
        else
            echo "No X server detected, skipping Sunshine installation"
        fi
    else
        echo "Warning: ubuntu.txt not found, skipping package installation"
    fi
fi

# Node.js setup
if [ "$os_name" = "macos" ]; then
    # Use nvm on macOS (installed via brew)
    if command -v nvm >/dev/null 2>&1; then
        nvm install --lts
    else
        echo "Warning: nvm not found, skipping Node.js LTS installation"
    fi
else
    # On Linux, install fnm (Fast Node Manager) as an alternative
    if ! command -v fnm >/dev/null 2>&1; then
        echo "Installing fnm (Fast Node Manager)"
        curl -fsSL https://fnm.vercel.app/install | bash
        # Add fnm to PATH for immediate use
        export PATH="$HOME/.local/share/fnm:$PATH"
    fi
fi

if ! yadm status >/dev/null 2>&1; then
    echo "Cloning yadm repository"
    yadm clone https://github.com/marcodejongh/marcos-yadm-dotfiles.git
else
    echo "Yadm repository already exists, skipping clone"
fi

if [ ! -d "$HOME/.zprezto" ]; then
    echo "Install zpresto"
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
fi

echo "FZF is installed via system package managers (brew on macOS, dnf/apt on Linux)"

if [ ! -d "$HOME/.zprezto/contrib/fzf" ]; then
    echo installing fzf-prezto
    mkdir -p $HOME/.zprezto/contrib && cd $_
    git clone https://github.com/gpanders/fzf-prezto.git fzf
    cd fzf
    git submodule update --init
    cd $HOME
fi

if [ ! -d "$HOME/.zprezto/contrib/fzf-tab" ]; then
    echo installing fzf-tab
    mkdir -p $HOME/.zprezto/contrib && cd $_
    git clone https://github.com/Aloxaf/fzf-tab $HOME/.zprezto/contrib/fzf-tab
    cd fzf
    git submodule update --init
    cd $HOME
fi


# Platform-specific font and app installation
if [ "$os_name" = "macos" ]; then
    if [ ! -f "$HOME/Library/Fonts/MesloLGS NF Regular.ttf" ]; then
        echo "Installing MesloLGS NF fonts"
        curl -L -o "$HOME/Library/Fonts/MesloLGS NF Regular.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
        curl -L -o "$HOME/Library/Fonts/MesloLGS NF Bold.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
        curl -L -o "$HOME/Library/Fonts/MesloLGS NF Italic.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
        curl -L -o "$HOME/Library/Fonts/MesloLGS NF Bold Italic.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
    fi
    
    # Check if 1Password is installed
    if [ ! -d "/Applications/1Password.app" ]; then
        echo "Installing 1password"
        mkdir -p $HOME/tmp/yadm-bootstrap;
        cd $HOME/tmp/yadm-bootstrap;
        curl -L -O https://downloads.1password.com/mac/1Password.zip
        unzip 1Password.zip
        open -W 1Password\ Installer.app
    fi
elif [ "$os_name" = "fedora" ] || [ "$os_name" = "ubuntu" ]; then
    # Install MesloLGS NF fonts on Linux
    font_dir="$HOME/.local/share/fonts"
    mkdir -p "$font_dir"
    
    if [ ! -f "$font_dir/MesloLGS NF Regular.ttf" ]; then
        echo "Installing MesloLGS NF fonts"
        curl -L -o "$font_dir/MesloLGS NF Regular.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
        curl -L -o "$font_dir/MesloLGS NF Bold.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
        curl -L -o "$font_dir/MesloLGS NF Italic.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
        curl -L -o "$font_dir/MesloLGS NF Bold Italic.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
        
        # Refresh font cache
        fc-cache -f -v
    fi
fi 

if yadm remote get-url origin | grep -q -v 'git@github.com:marcodejongh/marcos-yadm-dotfiles.git'; then
    echo "Detected raw yadm checkout, performing yadm admin"

    echo "Init submodules"
    yadm submodule update --recursive --init

    echo "Updating the yadm repo origin URL"
    yadm remote set-url origin "git@github.com:marcodejongh/marcos-yadm-dotfiles.git"

    # Since I do fancy stuff with git configs I need this
    yadm gitconfig "user.name" "Marco de Jongh"
    yadm gitconfig "user.email" "1107647+marcodejongh@users.noreply.github.com"
fi


# Git aliases (platform-aware)
git config --global alias.merge-commits '!funct() { git log --merges --reverse --oneline --ancestry-path $1..origin | grep "Merged pull request";  }; funct'
git config --global alias.pr-number '!funct() { git merge-commits $1 | head -n1 | sed -n "s/^.*Merged pull request #\\s*\\([0-9]*\\).*$/\\1/p"; }; funct'
git config --global alias.web-url '!funct() { git config remote.origin.url | sed -e"s/git@/https:\/\//" -e"s/\.git$//" | sed -E "s/(\/\/[^:]*):/\1\//"; }; funct'

# Platform-specific browser opening
if [ "$os_name" = "macos" ]; then
    git config --global alias.pr '!funct() { open "`git web-url`/pull/`git pr-number $1`" ;}; funct'
else
    git config --global alias.pr '!funct() { xdg-open "`git web-url`/pull/`git pr-number $1`" ;}; funct'
fi

if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    echo "Installing tmux plugin manager"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
else
    echo "Tmux plugin manager already installed"
fi
